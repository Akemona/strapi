// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Inputs /> should match the snapshot if type is events 1`] = `
.c4 {
  cursor: pointer;
  margin: 0;
  position: relative;
  width: 14px;
}

.c4:focus,
.c4:active {
  outline: 0;
}

.c4:before {
  content: '';
  position: absolute;
  left: 0;
  top: 50%;
  margin-top: calc(-14px / 2);
  width: 14px;
  height: 14px;
  border: 1px solid rgba(16,22,34,0.15);
  background-color: #fdfdfd;
  border-radius: 3px;
  box-sizing: border-box;
}

.c4:after {
  display: none;
  content: '\\f00c';
  font-family: 'FontAwesome';
  position: absolute;
  left: 0;
  top: 55%;
  margin-top: calc(-14px / 2);
  width: 14px;
  height: 14px;
  text-align: center;
  font-size: 9px;
  color: #1C5DE7;
  line-height: 14px;
}

.c4:checked:after {
  display: block;
}

.c4:disabled {
  background-color: #FAFAFB;
  cursor: initial;
}

.c4:disabled:after {
  color: #9ea7b8;
}

.c4 + label {
  display: inline-block;
  font-weight: 500;
  font-size: 1.3rem;
}

.c5 {
  cursor: pointer;
  margin: 0;
  position: relative;
  width: 14px;
}

.c5:focus,
.c5:active {
  outline: 0;
}

.c5:before {
  content: '';
  position: absolute;
  left: 0;
  top: 50%;
  margin-top: calc(-14px / 2);
  width: 14px;
  height: 14px;
  border: 1px solid rgba(16,22,34,0.15);
  background-color: #fdfdfd;
  border-radius: 3px;
  box-sizing: border-box;
}

.c5:after {
  display: none;
  content: '\\f00c';
  font-family: 'FontAwesome';
  position: absolute;
  left: 0;
  top: 55%;
  margin-top: calc(-14px / 2);
  width: 14px;
  height: 14px;
  text-align: center;
  font-size: 9px;
  color: #1C5DE7;
  line-height: 14px;
}

.c5:checked:after {
  display: block;
}

.c5:after {
  content: '\\f068';
  display: block;
  top: 50%;
  font-size: 10px;
}

.c5:disabled {
  background-color: #FAFAFB;
  cursor: initial;
}

.c5:disabled:after {
  color: #9ea7b8;
}

.c5 + label {
  display: inline-block;
  font-weight: 500;
  font-size: 1.3rem;
}

.c3 input,
.c3 label {
  display: inline-block;
  vertical-align: top;
}

.c3 input {
  margin-top: 4px;
  width: 14px;
  height: 12px;
}

.c3 input + label {
  display: inline-block;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  max-width: calc(100% - 14px);
  margin-left: 10px;
  margin-bottom: 0;
  line-height: 18px;
  cursor: pointer;
}

.c1 {
  width: 100%;
  font-weight: 500;
  font-size: 1.3rem;
  color: #333740;
}

.c2 {
  padding-top: 3px;
  padding-bottom: 8px;
}

.c2 table {
  width: 100%;
  border-radius: 2px;
  overflow: hidden;
}

.c2 tr:before {
  content: '-';
  position: absolute;
  left: 20px;
  display: inline-block;
  width: calc(100% - 40px);
  height: 1px;
  margin-top: -1px;
  line-height: 1.1em;
  color: transparent;
  background-color: #f6f6f6;
}

.c2 tr:first-of-type:before {
  left: 0;
  height: 2px;
  width: 100%;
  background-color: #fafafb;
  z-index: 1;
}

.c2 thead {
  background-color: #fafafb;
}

.c2 thead td {
  height: 41px;
  text-align: center;
  font-size: 13px;
  font-weight: 500;
}

.c2 tbody {
  border-bottom-left-radius: 2px;
  border-bottom-right-radius: 2px;
  box-shadow: inset 0px 0px 0px 1px #f6f6f6;
}

.c2 tbody td {
  height: 54px;
  padding-top: 3px;
}

.c2 tbody td input[type='checkbox']:disabled:before {
  background-color: #e8e5e5;
}

.c2 tbody td:first-of-type {
  width: 200px;
  padding-left: 30px;
  text-transform: capitalize;
}

.c2 tbody td:first-of-type label {
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  font-weight: 500;
  cursor: pointer;
}

.c2 tbody td:not(:first-of-type) > div {
  display: block;
  width: -webkit-fit-content;
  width: -moz-fit-content;
  width: fit-content;
  margin: 0 auto;
}

.c0 {
  position: relative;
  padding-bottom: 27px;
}

.c0 label {
  display: block;
  margin-bottom: 1rem;
}

.c0 > p {
  width: 100%;
  margin-bottom: -8px;
  padding-top: 10px;
  font-size: 13px;
  line-height: normal;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c0 .hasError input {
  border-color: #F64D0A;
}

<div
  className="c0"
>
  <label
    className="c1"
    htmlFor="events"
  >
    
  </label>
  <div
    className="c2"
  >
    <table>
      <thead>
        <tr>
          <td />
          <td>
            <span>
              Create
            </span>
          </td>
          <td>
            <span>
              Update
            </span>
          </td>
          <td>
            <span>
              Delete
            </span>
          </td>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td>
            <div
              className="c3"
              disabled={false}
            >
              <input
                autoComplete="off"
                autoFocus={false}
                checked={false}
                className="c4"
                disabled={false}
                id="entry"
                name="entry"
                onChange={[Function]}
                placeholder={null}
                tabIndex="0"
                type="checkbox"
              />
              <label
                className="c1"
                htmlFor="entry"
              >
                entry
              </label>
            </div>
          </td>
          <td>
            <div
              className="c3"
              disabled={false}
            >
              <input
                autoComplete="off"
                autoFocus={false}
                checked={false}
                className="c4"
                disabled={false}
                id="entry.create"
                name="entry.create"
                onChange={[Function]}
                placeholder={null}
                tabIndex="0"
                type="checkbox"
              />
              <label
                className="c1"
                htmlFor="entry.create"
              />
            </div>
          </td>
          <td>
            <div
              className="c3"
              disabled={false}
            >
              <input
                autoComplete="off"
                autoFocus={false}
                checked={false}
                className="c4"
                disabled={false}
                id="entry.update"
                name="entry.update"
                onChange={[Function]}
                placeholder={null}
                tabIndex="0"
                type="checkbox"
              />
              <label
                className="c1"
                htmlFor="entry.update"
              />
            </div>
          </td>
          <td>
            <div
              className="c3"
              disabled={false}
            >
              <input
                autoComplete="off"
                autoFocus={false}
                checked={false}
                className="c4"
                disabled={false}
                id="entry.delete"
                name="entry.delete"
                onChange={[Function]}
                placeholder={null}
                tabIndex="0"
                type="checkbox"
              />
              <label
                className="c1"
                htmlFor="entry.delete"
              />
            </div>
          </td>
        </tr>
        <tr>
          <td>
            <div
              className="c3"
              disabled={false}
            >
              <input
                autoComplete="off"
                autoFocus={false}
                checked={false}
                className="c5"
                disabled={false}
                id="media"
                name="media"
                onChange={[Function]}
                placeholder={null}
                tabIndex="0"
                type="checkbox"
              />
              <label
                className="c1"
                htmlFor="media"
              >
                media
              </label>
            </div>
          </td>
          <td>
            <div
              className="c3"
              disabled={false}
            >
              <input
                autoComplete="off"
                autoFocus={false}
                checked={false}
                className="c4"
                disabled={false}
                id="media.create"
                name="media.create"
                onChange={[Function]}
                placeholder={null}
                tabIndex="0"
                type="checkbox"
              />
              <label
                className="c1"
                htmlFor="media.create"
              />
            </div>
          </td>
          <td>
            <div
              className="c3"
              disabled={false}
            >
              <input
                autoComplete="off"
                autoFocus={false}
                checked={false}
                className="c4"
                disabled={false}
                id="media.update"
                name="media.update"
                onChange={[Function]}
                placeholder={null}
                tabIndex="0"
                type="checkbox"
              />
              <label
                className="c1"
                htmlFor="media.update"
              />
            </div>
          </td>
          <td>
            <div
              className="c3"
              disabled={false}
            >
              <input
                autoComplete="off"
                autoFocus={false}
                checked={false}
                className="c4"
                disabled={false}
                id="media.delete"
                name="media.delete"
                onChange={[Function]}
                placeholder={null}
                tabIndex="0"
                type="checkbox"
              />
              <label
                className="c1"
                htmlFor="media.delete"
              />
            </div>
          </td>
        </tr>
      </tbody>
    </table>
  </div>
  <span
    style={
      Object {
        "display": "none",
      }
    }
  />
</div>
`;

exports[`<Inputs /> should match the snapshot if type is headers 1`] = `
.c4 {
  width: 100%;
  height: 3.4rem;
  padding: 0 1rem;
  font-weight: 400;
  font-size: 1.3rem;
  cursor: text;
  outline: 0;
  border: 1px solid #E3E9F3;
  border-radius: 2px;
  color: #333740;
  background-color: transparent;
}

.c4::-webkit-input-placeholder {
  color: #919BAE;
}

.c4:focus {
  border-color: #78caff;
}

.c4:disabled {
  background-color: #FAFAFB;
  cursor: not-allowed;
  color: #9ea7b8;
}

.c3 {
  position: relative;
  background-color: #ffffff;
  border-radius: 2px;
}

.c3 button[type='button'] {
  width: 3.4rem;
  height: 3.4rem;
  position: absolute;
  top: 0;
  right: 0;
  z-index: 2;
  cursor: pointer;
  outline: 0;
  border: 0;
  background: transparent;
}

.c3 button[type='button']:hover span::before {
  color: #000000;
}

.c3 button[type='button'].shown span::before {
  color: #000000;
}

.c3 button[type='button'].shown + input[type='text'] {
  padding-right: calc(3.4rem + 1rem);
}

.c3 span {
  border-top-left-radius: 2px;
  border-bottom-left-radius: 2px;
}

.c3 input {
  position: relative;
  z-index: 1;
}

.c1 {
  width: 100%;
  font-weight: 500;
  font-size: 1.3rem;
  color: #333740;
}

.c5 {
  display: -webkit-box;
  display: -webkit-flex;
  display: -ms-flexbox;
  display: flex;
  -webkit-box-pack: center;
  -webkit-justify-content: center;
  -ms-flex-pack: center;
  justify-content: center;
  height: 20px;
  width: 20px;
  margin: 8px 5px 0px 0px;
  border-radius: 50%;
  border: 1px solid #e3e9f3;
  cursor: pointer;
}

.c5:focus {
  outline: 0;
}

.c5:after {
  content: '\\f068';
  font-family: FontAwesome;
  font-size: 9px;
  line-height: 18px;
  color: #007eff;
}

.c2 {
  margin-top: 12px;
  padding: 23px 24px 26px 24px;
  background-color: #fafafb;
  border-radius: 2px;
}

.c2 > ul {
  margin-bottom: 0;
  padding: 0;
  list-style-type: none;
}

.c2 > ul + button {
  padding: 0;
  color: #007eff;
  font-size: 13px;
  font-weight: 500;
  outline: 0;
}

.c2 > ul + button svg,
.c2 > ul + button span {
  vertical-align: middle;
}

.c2 > ul + button svg {
  margin-right: 10px;
}

.c2 > ul li {
  position: relative;
  padding-right: 30px;
}

.c2 > ul li:not(:first-of-type) {
  margin-bottom: 20px;
}

.c2 > ul li:last-of-type {
  margin-bottom: 6px;
}

.c2 > ul li > section {
  display: inline-block;
  width: 50%;
  vertical-align: top;
}

.c2 > ul li > section:nth-child(odd) {
  padding-right: 15px;
}

.c2 > ul li > section:nth-child(even) {
  padding-left: 15px;
}

.c2 > ul li > section > p {
  font-size: 13px;
  color: #333740;
  font-weight: 500;
}

.c2 > ul li > section > div:first-of-type {
  height: 34px;
}

.c2 > ul li > section > div:first-of-type > div:first-of-type {
  height: 34px;
  min-height: 34px;
  border: 1px solid #e3e9f3;
  border-radius: 2px;
  font-size: 13px;
  color: #333740;
  -webkit-align-items: normal;
  -webkit-box-align: normal;
  -ms-flex-align: normal;
  align-items: normal;
}

.c2 > ul li > section > div:first-of-type > div:first-of-type > div:first-of-type {
  height: 32px;
  padding: 0 1rem;
}

.c2 > ul li > section > div:first-of-type > div:first-of-type > div:last-of-type {
  display: none;
}

.c2 > ul li > section > div:first-of-type > div:first-of-type:hover {
  cursor: text;
}

.c2 > ul li > section > div:first-of-type > span + div:first-of-type {
  border-color: #78caff;
  box-shadow: none;
}

.c2 > ul li > section + div {
  position: absolute;
  top: 7px;
  right: 0;
}

.c2 > ul li > section + div button {
  margin: 0;
}

.c2 .bordered input {
  border: 1px solid #f64d0a;
}

.c0 {
  position: relative;
  padding-bottom: 27px;
}

.c0 label {
  display: block;
  margin-bottom: 1rem;
}

.c0 > p {
  width: 100%;
  margin-bottom: -8px;
  padding-top: 10px;
  font-size: 13px;
  line-height: normal;
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.c0 .hasError input {
  border-color: #F64D0A;
}

<div
  className="c0"
>
  <label
    className="c1"
    htmlFor="events"
  >
    
  </label>
  <div
    className="c2"
  >
    <ul>
      <li>
        <section>
          <p>
            <span>
              Key
            </span>
          </p>
        </section>
        <section>
          <p>
            <span>
              Value
            </span>
          </p>
        </section>
      </li>
      <li>
        <section>
          <div
            className=" css-2b097c-container"
            onKeyDown={[Function]}
          >
            <span
              aria-atomic="false"
              aria-live="polite"
              aria-relevant="additions text"
              className="css-1f43avz-a11yText-A11yText"
            />
            <div
              className=" css-1w9ejix-control"
              onMouseDown={[Function]}
              onTouchEnd={[Function]}
            >
              <div
                className=" css-g1d714-ValueContainer"
              >
                <div
                  className=" css-1uccc91-singleValue"
                />
                <div
                  className="css-b8ldur-Input"
                >
                  <div
                    className=""
                    style={
                      Object {
                        "display": "inline-block",
                      }
                    }
                  >
                    <input
                      aria-autocomplete="list"
                      autoCapitalize="none"
                      autoComplete="off"
                      autoCorrect="off"
                      disabled={false}
                      id="react-select-2-input"
                      onBlur={[Function]}
                      onChange={[Function]}
                      onFocus={[Function]}
                      spellCheck="false"
                      style={
                        Object {
                          "background": 0,
                          "border": 0,
                          "boxSizing": "content-box",
                          "color": "inherit",
                          "fontSize": "inherit",
                          "label": "input",
                          "opacity": 1,
                          "outline": 0,
                          "padding": 0,
                          "width": "1px",
                        }
                      }
                      tabIndex="0"
                      type="text"
                      value=""
                    />
                    <div
                      style={
                        Object {
                          "height": 0,
                          "left": 0,
                          "overflow": "scroll",
                          "position": "absolute",
                          "top": 0,
                          "visibility": "hidden",
                          "whiteSpace": "pre",
                        }
                      }
                    >
                      
                    </div>
                  </div>
                </div>
              </div>
              <div
                className=" css-1hb7zxy-IndicatorsContainer"
              >
                <div
                  aria-hidden="true"
                  className=" css-tlfecz-indicatorContainer"
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                >
                  <svg
                    aria-hidden="true"
                    className="css-tj5bde-Svg"
                    focusable="false"
                    height={20}
                    viewBox="0 0 20 20"
                    width={20}
                  >
                    <path
                      d="M14.348 14.849c-0.469 0.469-1.229 0.469-1.697 0l-2.651-3.030-2.651 3.029c-0.469 0.469-1.229 0.469-1.697 0-0.469-0.469-0.469-1.229 0-1.697l2.758-3.15-2.759-3.152c-0.469-0.469-0.469-1.228 0-1.697s1.228-0.469 1.697 0l2.652 3.031 2.651-3.031c0.469-0.469 1.228-0.469 1.697 0s0.469 1.229 0 1.697l-2.758 3.152 2.758 3.15c0.469 0.469 0.469 1.229 0 1.698z"
                    />
                  </svg>
                </div>
                <span
                  className=" css-1okebmr-indicatorSeparator"
                />
                <div
                  aria-hidden="true"
                  className=" css-tlfecz-indicatorContainer"
                  onMouseDown={[Function]}
                  onTouchEnd={[Function]}
                >
                  <svg
                    aria-hidden="true"
                    className="css-tj5bde-Svg"
                    focusable="false"
                    height={20}
                    viewBox="0 0 20 20"
                    width={20}
                  >
                    <path
                      d="M4.516 7.548c0.436-0.446 1.043-0.481 1.576 0l3.908 3.747 3.908-3.747c0.533-0.481 1.141-0.446 1.574 0 0.436 0.445 0.408 1.197 0 1.615-0.406 0.418-4.695 4.502-4.695 4.502-0.217 0.223-0.502 0.335-0.787 0.335s-0.57-0.112-0.789-0.335c0 0-4.287-4.084-4.695-4.502s-0.436-1.17 0-1.615z"
                    />
                  </svg>
                </div>
              </div>
            </div>
            <input
              name="events.0.key"
              type="hidden"
            />
          </div>
        </section>
        <section>
          <div
            className="c3"
          >
            <input
              autoComplete="off"
              autoFocus={false}
              className="c4"
              id="events.0.value"
              name="events.0.value"
              onChange={[MockFunction]}
              placeholder={null}
              tabIndex="0"
              type="text"
              value=""
            />
          </div>
        </section>
        <div>
          <button
            className="c5"
            onClick={[Function]}
            type="button"
          />
        </div>
      </li>
    </ul>
    <button
      onClick={[Function]}
      type="button"
    >
      <svg
        fill="#007eff"
        height="13px"
        viewBox="0 0 13 13"
        width="10px"
        xmlns="http://www.w3.org/2000/svg"
      >
        <g
          data-name="Layer 2"
        >
          <path
            d="M6.5.5v12m6-6H.5"
            fill="none"
            stroke="#007eff"
            strokeLinecap="round"
          />
        </g>
      </svg>
      <span>
        Create a new header
      </span>
    </button>
  </div>
</div>
`;
